name: 🚀 BraveBot CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📋 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov flake8 black
    
    - name: 🔍 Lint Code
      run: |
        black --check --diff . || echo "⚠️ Code formatting issues found"
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "⚠️ Linting issues found"
    
    - name: 🧪 Run Basic Tests
      env:
        BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
        DATABASE_URL: sqlite:///test_bravebot.db
      run: |
        python -c "
        import sys
        import sqlite3
        
        # Test database creation
        conn = sqlite3.connect('test_bravebot.db')
        conn.execute('CREATE TABLE IF NOT EXISTS test (id INTEGER)')
        conn.close()
        
        # Test imports
        try:
            import streamlit
            import plotly
            import pandas
            import requests
            print('✅ All core dependencies imported successfully')
        except ImportError as e:
            print(f'❌ Import error: {e}')
            sys.exit(1)
        "

  deploy:
    name: 🚀 Deploy to Railway
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📦 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔧 Prepare Deployment
      run: |
        echo "🚀 Preparing deployment..."
        echo "📅 Deploy time: $(date)"
        echo "🔗 Commit: ${{ github.sha }}"
        
        # Check critical files
        if [ ! -f requirements.txt ]; then
          echo "❌ requirements.txt missing"
          exit 1
        fi
        
        if [ ! -f Dockerfile ]; then
          echo "❌ Dockerfile missing"
          exit 1
        fi
        
        echo "✅ Deployment files ready"
    
    - name: 🔍 Debug Secrets
      run: |
        echo "Checking Railway token availability..."
        if [ -z "${{ secrets.RAILWAY_TOKEN }}" ]; then
          echo "❌ RAILWAY_TOKEN secret is empty or not set"
          echo "📋 Available secrets (names only):"
          echo "- Check your repository secrets in Settings"
        else
          echo "✅ RAILWAY_TOKEN secret is available"
          echo "📏 Token length: ${#RAILWAY_TOKEN}"
        fi
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

    - name: 🚂 Deploy to Railway
      run: |
        # Install Railway CLI
        npm install -g @railway/cli@latest
        
        # Login using token
        echo "${{ secrets.RAILWAY_TOKEN }}" | railway login --token
        
        # Deploy
        railway deploy --service=bravebot
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    
    - name: ✅ Deployment Success
      if: success()
      run: |
        echo "🎉 BraveBot deployed successfully!"
        echo "🔗 Check your Railway dashboard for the live URL"
        echo "📊 Dashboard will be available shortly"
    
    - name: ❌ Deployment Failure
      if: failure()
      run: |
        echo "💥 Deployment failed!"
        echo "🔍 Check Railway logs for detailed error information"
        echo "💡 Common fixes:"
        echo "   • Check requirements.txt syntax"
        echo "   • Verify RAILWAY_TOKEN secret"
        echo "   • Review Dockerfile configuration"

  notify:
    name: 📢 Notify Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: 📊 Deployment Summary
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ DEPLOYMENT SUCCESSFUL"
          echo "🔗 BraveBot is now live on Railway"
          echo "📊 Dashboard URL: Check Railway console"
        else
          echo "❌ DEPLOYMENT FAILED"
          echo "🔍 Check the logs above for error details"
          echo "💡 Next steps:"
          echo "   1. Fix the identified issues"
          echo "   2. Push changes to main branch"  
          echo "   3. Deployment will retry automatically"
        fi
