name: 🚀 BraveBot CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📋 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: 🔍 Lint Code
      run: |
        pip install flake8 black
        black --check --diff .
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: 🗃️ Create Test Database
      run: |
        python -c "
        import sqlite3
        conn = sqlite3.connect('test_bravebot.db')
        conn.execute('''CREATE TABLE IF NOT EXISTS user_stats (
            user_id INTEGER PRIMARY KEY,
            total_checks INTEGER DEFAULT 0,
            passed_checks INTEGER DEFAULT 0,
            failed_checks INTEGER DEFAULT 0,
            last_check TEXT,
            joined_date TEXT DEFAULT CURRENT_TIMESTAMP
        )''')
        conn.execute('''CREATE TABLE IF NOT EXISTS logs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp TEXT DEFAULT CURRENT_TIMESTAMP,
            level TEXT DEFAULT 'INFO',
            message TEXT,
            user_id INTEGER
        )''')
        conn.commit()
        conn.close()
        "
    
    - name: 🧪 Run Tests
      env:
        TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
        DATABASE_URL: sqlite:///test_bravebot.db
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing
    
    - name: 📊 Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📦 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 🔐 Run Security Audit
      run: |
        pip install safety bandit
        safety check -r requirements.txt
        bandit -r . -f json -o bandit-report.json || true
    
    - name: 📋 Upload Security Report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json

  deploy:
    name: 🚀 Deploy to Railway
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📦 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🚂 Deploy to Railway
      uses: railwayapp/railway-deploy@v1
      with:
        service: bravebot
        railway_token: ${{ secrets.RAILWAY_TOKEN }}
    
    - name: ✅ Deployment Success Notification
      if: success()
      run: |
        echo "🎉 BraveBot deployed successfully to Railway!"
        echo "🔗 Check status at: https://railway.app"
    
    - name: ❌ Deployment Failure Notification
      if: failure()
      run: |
        echo "💥 Deployment failed! Check logs for details."

  backup:
    name: 💾 Create Backup
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && success()
    
    steps:
    - name: 📦 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🗃️ Create Database Backup
      run: |
        mkdir -p backups
        DATE=$(date +%Y%m%d_%H%M%S)
        echo "Creating backup for deployment: $DATE" > backups/backup_$DATE.txt
        echo "Commit: ${{ github.sha }}" >> backups/backup_$DATE.txt
        echo "Branch: ${{ github.ref_name }}" >> backups/backup_$DATE.txt
    
    - name: 📤 Upload Backup to Releases
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: backups/*
        name: "BraveBot Backup - $(date +%Y-%m-%d)"
        body: |
          🗃️ **Automated Database Backup**
          
          📅 **Date:** $(date +%Y-%m-%d %H:%M:%S)
          🔗 **Commit:** ${{ github.sha }}
          🌿 **Branch:** ${{ github.ref_name }}
          
          This backup was created automatically after successful deployment.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
