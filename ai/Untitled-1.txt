#!/usr/bin/env python3
"""
🚀 BraveBot v2.0 Launcher - Fixed Version
========================================
مشغل محسن مع حل مشاكل التضارب
"""

import os
import sys
import time
import subprocess
import threading
from pathlib import Path

def check_dependencies():
    """فحص وتثبيت المتطلبات"""
    print("📦 فحص المتطلبات...")
    
    required_packages = [
        'python-telegram-bot',
        'streamlit', 
        'plotly',
        'pandas',
        'numpy',
        'python-dotenv',
        'requests'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print(f"❌ مكتبات مفقودة: {', '.join(missing_packages)}")
        print("🔧 تثبيت المكتبات...")
        
        for package in missing_packages:
            subprocess.run([sys.executable, '-pip', 'install', package], 
                         capture_output=True)
        
        print("✅ تم تثبيت المكتبات")
    else:
        print("✅ جميع المكتبات متوفرة")

def check_files():
    """فحص الملفات المطلوبة"""
    print("📁 فحص الملفات...")
    
    required_files = [
        'main.py',
        'dashboard_simple.py',
        'conflict_checker.py',
        '.env'
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print(f"❌ ملفات مفقودة: {', '.join(missing_files)}")
        
        if '.env' in missing_files:
            print("💡 أنشئ ملف .env وأضف:")
            print("   TELEGRAM_TOKEN=your_bot_token_here")
        
        return False
    
    print("✅ جميع الملفات موجودة")
    return True

def run_conflict_check():
    """تشغيل فحص التضارب"""
    print("🔍 فحص تضارب البوت...")
    
    try:
        result = subprocess.run([sys.executable, 'conflict_checker.py'], 
                              capture_output=True, text=True, timeout=30)
        
        print(result.stdout)
        if result.stderr:
            print("⚠️", result.stderr)
        
        return result.returncode == 0
    except subprocess.TimeoutExpired:
        print("⏰ انتهت مهلة فحص التضارب")
        return False
    except Exception as e:
        print(f"❌ خطأ في فحص التضارب: {e}")
        return False

def run_dashboard():
    """تشغيل Dashboard في thread منفصل"""
    try:
        print("📊 تشغيل Dashboard...")
        subprocess.run([
            sys.executable, '-m', 'streamlit', 'run', 
            'dashboard_simple.py', 
            '--server.port', '8501',
            '--server.headless', 'true'
        ], check=True)
    except Exception as e:
        print(f"❌ خطأ في Dashboard: {e}")

def run_bot():
    """تشغيل البوت"""
    try:
        print("🤖 تشغيل البوت...")
        subprocess.run([sys.executable, 'main.py'], check=True)
    except KeyboardInterrupt:
        print("\n⏹️ تم إيقاف البوت")
    except Exception as e:
        print(f"❌ خطأ في البوت: {e}")

def main():
    """الدالة الرئيسية"""
    print("🚀 BraveBot v2.0 Launcher")
    print("=" * 50)
    
    # فحص المتطلبات
    check_dependencies()
    
    # فحص الملفات
    if not check_files():
        print("❌ ملفات مطلوبة مفقودة!")
        input("اضغط Enter للخروج...")
        return
    
    # عرض القائمة
    while True:
        print("\n📋 اختر طريقة التشغيل:")
        print("1. 🔍 فحص التضارب فقط")
        print("2. 📊 تشغيل Dashboard فقط")
        print("3. 🤖 تشغيل البوت فقط")
        print("4. 🚀 تشغيل النظام كاملاً")
        print("5. ❌ خروج")
        
        choice = input("\n👉 اختيارك (1-5): ").strip()
        
        if choice == '1':
            run_conflict_check()
        
        elif choice == '2':
            print("\n📊 تشغيل Dashboard...")
            print("🌐 افتح المتصفح على: http://localhost:8501")
            run_dashboard()
        
        elif choice == '3':
            if run_conflict_check():
                run_bot()
            else:
                print("❌ فشل فحص التضارب - لا يمكن تشغيل البوت")
        
        elif choice == '4':
            print("\n🚀 تشغيل النظام الكامل...")
            
            if not run_conflict_check():
                print("❌ فشل فحص التضارب")
                continue
            
            # تشغيل Dashboard في thread منفصل
            dashboard_thread = threading.Thread(target=run_dashboard, daemon=True)
            dashboard_thread.start()
            
            time.sleep(3)  # انتظار بدء Dashboard
            print("📊 Dashboard متاح على: http://localhost:8501")
            
            # تشغيل البوت
            run_bot()
            
        elif choice == '5':
            print("👋 وداعاً!")
            break
        
        else:
            print("❌ اختيار غير صحيح")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n👋 تم إيقاف البرنامج")
    except Exception as e:
        print(f"❌ خطأ عام: {e}")
        input("اضغط Enter للخروج...")